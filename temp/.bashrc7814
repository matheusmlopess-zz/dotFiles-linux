# ~/.bashrc: executed by bash(1) for non-login shellsdd.
#----------------------------------------------------------------------
#                          CustoMe's
#----------------------------------------------------------------------
# global var's...

  red=$'\e[1;31m'
  grn=$'\e[1;32m'
  yel=$'\e[1;33m'
  blu=$'\e[1;34m'
  mag=$'\e[1;35m'
  cyn=$'\e[1;36m'
#ha! finish with dat  
  end=$'\e[0m'
#ha! random pallet [1-255] end the operation with \m & end to close color 
  rnd=$'\e[38;05;'

# supressing pushd and popd the default "print stack" when called 
pushd(){       command pushd $@ > /dev/null; }
popd() {       command popd $@ > /dev/null;  }

#oye! ssh must be configured already ... just saying ...
github_ssh(){
	echo ${yel}
	local SSH_CHK=$(eval "git remote -v");
	echo $(pwd)
	echo ${end}
	printf "\n"

		if [[ $SSH_CHK == *"git@github.com:matheusmlopess"* ]]; then
	  		echo "ssh checked and all good! ...:"
			git remote -v;
		elif [[ $SSH_CHK == *"https://github.com/matheusmlopess"* ]];then
			
			repository=${PWD##*/}
 			read -p "is ('$repository' ) the right github repository [Y/n]" -r YesNo; 
				case "$YesNo" in
					[yY][eE][sS]|[yY]) 
					
					git remote set-url origin git@github.com:matheusmlopess/$repository.git
			                echo "All good now... ssh set and running"
					git remote -v;
					;;
					*)
				       	read -p " Respository name (clone path) :" -r respositoryname 
					git remote set-url origin git@github.com:matheusmlopess/$repositoryname.git
					echo "All good now... ssh set and running"
					git remote -v 
					;;
				esac
		elif [[ $1 == "0" ]]; then
			cd $2
			echo Applying ssh new repository permissions ... son!
			git remote set-url origin git@github.com:matheusmlopess/$2.git

			echo ${cyn} ssh permission successfully done: 
			git remote -v 
			echo ${end}

		else	
			git remote -v;
		fi
}

#HA!que foi que eu fiz ... -_- borring but super useful 
whatDidIdo(){

	if [ -z  "$@"  ]; then

            (zcat $(ls -tr /var/log/apt/history.log*.gz); cat /var/log/apt/history.log) 2>/dev/null | 
	     egrep '^(Start-Date:|Commandline:)' |
	     grep -v aptdaemon | 
	     egrep '^Commandline:' >> ~/Desktop/apt-installed-packge_aux.txt
	     
	     while IFS='' read -r line || [[ -n "$line" ]]; do
		     
		     if [[ $line == *"apt-get install"* ]]; then
		     	echo ${line//Commandline:/sudo} ;
	     	     fi

	     done <  ~/Desktop/apt-installed-packge_aux.txt > ~/Desktop/gits/dotFiles-linux/apt-installed-packge.txt ; rm ~/Desktop/apt-installed-packge_aux.txt
		
        elif [ $1 -eq "bydate" ]; then

	      (zcat $(ls -tr /var/log/apt/history.log*.gz); cat /var/log/apt/history.log) 2>/dev/null |
	       egrep '^(Start-Date:|Commandline:)' |
	       grep -v aptdaemon |
	       egrep -B1 '^Commandline:' >> ~/Desktop/gits/dotFiles-linux/apt-installed-packge-byDate.txt
	else
		echo try: \"whatDidIdo bydate\" mate!
	fi
}

# find subtexts/substrings/strokes in a text file
loopBack(){
		while IFS='' read -r line || [[ -n "$line" ]]; do
    		#	echo "Text read from file: $line"
			if [[ $line == *"S@"* ]]; then
				sed -i -e 's/Commandline:/sudo/g' $line
				echo ${yel} $line ${end}
			
			fi
		done < "$1"
}

# :)
pkg_status(){
		
		local qualPacote=$1
	      #----------------------
			local XPKG_CHK=0;   #flag ... 
			# dont require sudo permissions
			# 2>&1 :Passing stderr (2) over "-v" pipe along with stdout (1)
			# by redirecting the stderr stream (file descriptor #2)
			# to stdout (file descriptor #1)	
			command -v $qualPacote >/dev/null 2>&1 || { XPKG_CHK=1;}
			if [ $XPKG_CHK -eq 0 ];
			then
				#TOP 
				apt-cache policy ${qualPacote};
			else	
				read -r -p "Pakage not found... Do you want to install it [Y/n]? " response
				case "$response" in
					[yY][eE][sS]|[yY]) 
						sudo apt-get install $qualPacote;
					;;
					*)
						echo okay fine ...;	
				        ;;
				esac
			fi

}

# salva conteudo do clipboard em pasta dedicada --> ~/Desktop/dotFiles
cmd(){
	# init function: creat cmd folder the first time cmd() is called.
	pushd ~/Desktop;
	if [ ! -d ~/Desktop/gits ]; then 
		mkdir gits
		echo "dotFiles directory not found... in $(pwd)"
		git clone https://github.com/matheusmlopess/dotFiles-linux.git 
		cd dotFiles-linux
		echo " " > commands.txt
		github_ssh
		return 1;
	else
		cd gits/dotFiles-linux
	fi

   command ls -a;
   local NUMBER=$[ ( $RANDOM % 255 )  + 1 ]
   local VAR=$@;

	if [[ -z $VAR ]]; then 
		printf "\n"
		echo ${yel} 
		xclip -o;
        	echo  ${end}
		printf "\n"

     local CONTEUDO=$(xclip -o);
        echo ${rnd}${NUMBER}m $CONTEUDO  >> commands.txt
	else
        echo ${rnd}${NUMBER}m $@ ${end} >> commands.txt
fi
popd;
}

txt(){
	pushd ~/Desktop;
	cd gits/txts	


	local VAR=$@;
if [[ -z $VAR ]]; then
        VAR=$(xclip -o);
	echo ${yel};     xclip -o;    		        printf "\n"; echo ${end};
			 ls -a | grep ".txt"; 		printf "\n";

	read -p "which .txt file?${end} ${cyn}(or just) type a name: ${end}:" -r nome;
	xclip -o >> $nome.txt;
	
else 
	
	echo ${yel};     echo $VAR  		  printf "\n";  echo ${end};
		         ls -a | grep ".txt";     printf "\n";
			 
	read -p "which .txt file?${end} ${cyn}(or just) type a name: ${end}:" -r nome;
	echo $VAR >> $nome.txt;
fi
	popd;
}

git_commit(){
	local path=$(pwd);
	pushd ~/Desktop;
	
	local MSG="";
	local repository="";
	local response="";
	local token="";

		if [ ! -d ~/Desktop/gits ]; then
			mkdir gits && chmod 700 ~/Desktop/gits
			git clone https://github.com/matheusmlopess/dotFiles-linux.git 
		else
			command cd gits;
		fi


	if [[ -z "$@" ]]; then
	 	echo "u ain't got no commits, get outta here!";

	elif [[ $1 == "bashrc" ]]
	then 
		cd dotFiles-linux;
		local NUM=$[ ($RANDOM % 9999) +1 ];
		ls -la	&& printf "\n"
		mv .bashrc temp/.bashrc$NUM;
		command cp $HOME/.bashrc .
		
		git add .bashrc
		git add temp/
		github_ssh
			
			while [ -z "$MSG" ]; do
				read -p "commit msg: " -r MSG;
				#shit solution... f"$%"# it
				if [[ ! -n "$MSG" ]]; then
				 	echo "shit son! empty message! try again ..."
				fi
			done;
		
		printf "\n";
		git commit -m "${MSG}'";
		git push origin master

	elif [[ $1 == "new" ]]; then 
		pwd
		while [ -z "$repository" ]; do 
			
			read -p " New repo name: " -r repository
			if [[ ! -n "$repository" ]]; then
				echo "${mag}   shit son! empty message or typo, try again ...  ${end}"
			else 
				read -p "${grn} Are you sure you entered the name repo correctly:${end} ${yel} \"$repository\" ${end} [y/N] " -r response
				response=${response,,}    # tolower
				if [[ "$response" =~ ^(yes|y)$ ]]; then 
					echo "${grn}*****|_Ok moving on ...${end} "
				else
					repository="";				
				fi;
			fi;

		done;

                token=`openssl enc -aes-256-cbc -d -in ~/.ssh/token.dat`
		curl -u matheusmlopess:$token https://api.github.com/user/repos -d '{ "name": "'$repository'" }'
		echo "${blu}"
		echo "  *****************************************"
		echo "  **** repo created successfully!! ********"
		echo "  *****************************************"
		echo "${end}"
		echo "${yel} git cloning new repo ... ${end}"
		git clone https://github.com/matheusmlopess/$repository.git 
		
		printf "\n"
		github_ssh 0 ${repository}

	elif [[ $1 == "." ]]; then
		cd $path
		ls -la	&& printf "\n"
		
		git add .
		github_ssh
			
			while [ -z "$MSG" ]; do
				read -p "commit msg: " -r MSG;
				#shit solution... f"$%"# it
				if [[ ! -n "$MSG" ]]; then
				 	echo "shit son! empty message! try again ..."
				fi
			done;
		
		printf "\n";
		git commit -m "${MSG}";
		printf "\n";
		git push origin master
	
	elif [[ $1 == "clone" ]];then
		read -p "github username: " -r USER;
		# curl https://api.github.com/users/$USER/repos?per_page=1000" | grep -o 'git@[^"]*'
		clonarQual=`curl "https://api.github.com/users/$USER/repos?per_page=1000" | grep -o 'git@[^"]*'`

		
		for repo in $clonarQual
		do 
			NUMBER=$[ ( $RANDOM % 255 )  + 1 ]
			echo ${rnd}${NUMBER}m $repo ${end}

		done;
	else
		echo under construction
	
	fi
	
	popd;
}

tmcolor(){
	VAR=$@;
	echo $VAR
	if [[ -z $VAR ]]; then
		export PS1='\[\033[01;48m\] ~$(pwd)〉\033[0m \n$ '
	#fi
	else	
	#if [ "$VAR" == "f" ]; then
		NUM=$[ ( $RANDOM % 37 ) + 30 ];
	#	echo numero tmcolor $NUM
		export PS1='$\e${NUM}m~$(pwd)〉${end}\n$ '
	fi
#clear
}

_restartWifiHrdwar(){
	dmesg | tail ;
		      echo "Wifi HW turning off ..."
		       sudo iwconfig 'wlp3s0' txpower off
		      echo "Wifi HW turning on!"
		       sudo iwconfig 'wlp3s0' txpower auto 
		      sleep 0.25
    		       sudo iwconfig 'wlp3s0' power off
		      echo "Restatrting NetworkManager ..."
		       sudo systemctl restart NetworkManager
  		      echo "NetworkManager restored ..."
 }

#vundle like mananger, for pakages.
system_chk(){
	pushd ~/Desktop;
	if [ ! -d ~/Desktop/gits ]; then
	#há thats infinitely better ...	
		pkg_status 'git'
		pkg_status 'xclip'
		cmd
	fi

	if [ ! -d ~/Desktop/txts ]; then
		txt
	fi
	popd;
}

#-----------------------------------------------------------------------
#custom end | ----------------------------------------------------------
#-----------------------------------------------------------------------

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

#----------------------------------------------------------------------
#                              CustoM
#----------------------------------------------------------------------
# Overwintering configuração prévia do prompt
# Custom prompt (PS1) - tmcolor $@ - configura para cor aleatória da palet de 255 cores do xterm/gnome terminal
tmcolor

export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/.virtualenvs/pythonProjects/
export VIRTUALENVWRAPPER_SCRIPT=$HOME/.local/bin/virtualenvwrapper.sh
source $HOME/.local/bin/virtualenvwrapper.sh

#/usr/local/bin/virtualenvwrapper.sh

# ----------------------------- Aliases --------------------------------------
# ----------------------------------------------------------------------------

alias _bashrc='nvim ~/.bashrc'
alias clc='clear'
alias _vimrc='vim ~/.vimrc'
alias _nvimrc='nvim ~/.config/nvim/init.vim'
alias ..='cd ..'
alias ...='cd ../../'
alias _update='sudo apt-get update'
alias _install='sudo apt-get install'
alias py='python'
alias desk='cd ~/Desktop'
alias editcmd='nvim ~/Desktop/dotFiles/commands.txt'
alias rsetcolor='echo ${end}'
cmt(){  AUX=$@; command git commit -m "${AUX}";  }
alias pullFoldrs='cd ~/Desktop/gits'
alias s="git status -s"
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias rs='resize -s 110 100'
alias hide_icons='ls ~/Desktop > ~/Desktop/.hidden'
alias show_icons='rm ~/Desktop/.hidden'
cd(){	command cd $1 && l && printf "\n"; }
alias gits='cd ~/Desktop/gits'
cmdisplay(){	cat ~/Desktop/gits/dotFiles-linux/commands.txt;     }

